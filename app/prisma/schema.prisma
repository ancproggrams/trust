

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/zzp-trust/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Core User model - extended for onboarding
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Profile information
  profile   UserProfile?
  
  // Demo related
  isDemo    Boolean @default(false)
  demoExpiresAt DateTime?
  
  // Relations (appointments deprecated - kept for data integrity)
  clients     Client[]
  invoices    Invoice[]
  documents   Document[]
  auditLogs   AuditLog[]
  creditors   Creditor[]
  roles       UserRole[]
  standardServices StandardService[]
  
  // New compliance relations
  consents    ClientConsent[]
  psd2Auths   PSD2Authentication[]
  
  @@map("users")
}

// Extended user profile for business information
model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Business details (KvK registration) - MANDATORY
  companyName       String
  kvkNumber        String   @unique
  vatNumber        String   @unique
  
  // Contact information - MANDATORY
  phone            String
  address          String
  postalCode       String
  city            String
  country          String   @default("Netherlands")
  
  // Banking details - MANDATORY
  iban            String   @unique
  bankName        String
  accountHolder   String
  
  // Validation status
  validationStatus ValidationStatus @default(PENDING)
  validatedAt      DateTime?
  validatedBy      String?
  rejectionReason  String?
  
  // Business type
  businessType     BusinessType @default(ZZP)
  
  // Onboarding
  onboardingStep   OnboardingStep @default(BASIC_INFO)
  onboardingCompletedAt DateTime?
  
  // Audit fields
  createdBy        String?
  updatedBy        String?
  version          Int      @default(1)
  immudbTxId       String?
  
  // Compliance fields
  dataRetentionUntil DateTime?
  complianceStatus   ComplianceStatus @default(PENDING)
  lastComplianceCheck DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_profiles")
}

// Creditors/Suppliers model
model Creditor {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic information - MANDATORY
  name        String
  email       String
  phone       String
  
  // Business details - MANDATORY
  companyName String
  kvkNumber   String   @unique
  vatNumber   String   @unique
  
  // Contact details - MANDATORY
  address     String
  postalCode  String
  city        String
  country     String   @default("Netherlands")
  
  // Banking information - MANDATORY
  iban        String   @unique
  bankName    String
  accountHolder String
  
  // Validation
  validationStatus ValidationStatus @default(PENDING)
  validatedAt      DateTime?
  validatedBy      String?
  rejectionReason  String?
  
  // Settings
  isActive    Boolean @default(true)
  
  // Audit fields
  createdBy        String?
  updatedBy        String?
  version          Int      @default(1)
  immudbTxId       String?
  
  // Compliance fields
  dataRetentionUntil DateTime?
  complianceStatus   ComplianceStatus @default(PENDING)
  lastComplianceCheck DateTime?
  
  // Relations
  validations CreditorValidation[]
  payments    Payment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("creditors")
}

// Creditor validation process tracking
model CreditorValidation {
  id          String   @id @default(cuid())
  creditorId  String
  creditor    Creditor @relation(fields: [creditorId], references: [id], onDelete: Cascade)
  
  validationType ValidationMethod
  status         ValidationStatus @default(PENDING)
  
  // Validation details
  requestedBy    String
  requestedAt    DateTime @default(now())
  validatedBy    String?
  validatedAt    DateTime?
  
  // Documentation
  documents      String[] // Array of document URLs/paths
  notes          String?
  rejectionReason String?
  
  // Automated validation results
  kvkValidated   Boolean?
  ibanValidated  Boolean?
  emailValidated Boolean?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("creditor_validations")
}

// Payment tracking for creditors
model Payment {
  id          String   @id @default(cuid())
  creditorId  String
  creditor    Creditor @relation(fields: [creditorId], references: [id], onDelete: Cascade)
  
  amount      Decimal  @db.Decimal(10,2)
  description String?
  reference   String?
  
  status      PaymentStatus @default(PENDING)
  
  scheduledAt DateTime?
  processedAt DateTime?
  
  // Payment method
  method      PaymentMethod @default(BANK_TRANSFER)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("payments")
}

// Audit logging for all critical actions
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  action    AuditAction
  entity    String   // e.g., "Creditor", "Payment", "User"
  entityId  String   // ID of the affected entity
  
  // Change details
  oldValues Json?
  newValues Json?
  
  // Context
  ipAddress String?
  userAgent String?
  sessionId String?
  
  // ImmuDB integration
  immudbTxId     String?
  immudbVerified Boolean @default(false)
  immudbHash     String?
  
  // Compliance & retention
  retentionUntil DateTime?
  complianceLevel ComplianceLevel @default(STANDARD)
  
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}

// ImmuDB transaction tracking
model ImmuDBTransaction {
  id           String   @id @default(cuid())
  txId         String   @unique
  timestamp    DateTime
  verified     Boolean  @default(false)
  hash         String
  
  // Related audit logs
  auditLogIds  String[]
  
  // Verification details
  verifiedAt   DateTime?
  verificationHash String?
  
  createdAt DateTime @default(now())
  
  @@map("immudb_transactions")
}

// Compliance audit trail
model ComplianceAudit {
  id               String   @id @default(cuid())
  entity           String   // Model name
  entityId         String   // Entity ID
  
  checkType        ComplianceCheckType
  status           ComplianceStatus
  
  // Check details
  requiredFields   String[] // Required field names
  missingFields    String[] // Missing field names
  validationErrors Json?
  
  // Resolution
  resolvedAt       DateTime?
  resolvedBy       String?
  resolution       String?
  
  // Schedule info
  scheduledAt      DateTime?
  nextCheckAt      DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("compliance_audits")
}

// Enhanced Client model with complete onboarding flow
model Client {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic information - MANDATORY
  name         String
  email        String
  phone        String
  
  // Business details - MANDATORY for business clients
  company      String?
  kvkNumber    String?   @unique
  vatNumber    String?   @unique
  businessType BusinessType @default(ZZP)
  
  // Contact details - MANDATORY
  address      String?
  postalCode   String?
  city         String?
  country      String?   @default("Netherlands")
  
  // Admin/Accounting contact - MANDATORY for business clients
  adminContactName    String?
  adminContactEmail   String?
  adminContactPhone   String?
  adminDepartment     String?   // Administratie afdeling
  
  // Banking information - MANDATORY
  iban            String?   @unique
  bankName        String?
  accountHolder   String?
  postboxNumber   String?   // Optional postbus nummer
  
  // Onboarding workflow status
  onboardingStatus    ClientOnboardingStatus @default(PENDING_VALIDATION)
  onboardingStep      OnboardingStep @default(BASIC_INFO)
  onboardingCompletedAt DateTime?
  
  // Validation status - MANDATORY for invoicing
  validationStatus    ValidationStatus @default(PENDING)
  validatedAt         DateTime?
  validatedBy         String?
  rejectionReason     String?
  
  // Admin approval - REQUIRED before invoicing
  approvalStatus      ClientApprovalStatus @default(PENDING_APPROVAL)
  approvedAt          DateTime?
  approvedBy          String?
  approvalNotes       String?
  
  // Email confirmation tracking
  emailConfirmed      Boolean @default(false)
  emailConfirmedAt    DateTime?
  emailConfirmationToken String?
  emailConfirmationExpiresAt DateTime?
  
  // KVK & BTW validation results
  kvkValidated        Boolean @default(false)
  kvkValidatedAt      DateTime?
  btwValidated        Boolean @default(false)
  btwValidatedAt      DateTime?
  ibanValidated       Boolean @default(false)
  ibanValidatedAt     DateTime?
  
  // Settings & Status
  isActive            Boolean @default(true)
  canCreateInvoices   Boolean @default(false) // Security control
  invoicePermissionGrantedAt DateTime?
  invoicePermissionGrantedBy String?
  
  totalInvoiced Decimal @db.Decimal(10,2) @default(0)
  
  // Audit fields
  createdBy        String?
  updatedBy        String?
  version          Int      @default(1)
  immudbTxId       String?
  
  // Compliance fields
  dataRetentionUntil DateTime?
  complianceStatus   ComplianceStatus @default(PENDING)
  lastComplianceCheck DateTime?
  
  // Relations (appointments deprecated - kept for data integrity)
  invoices     Invoice[]
  documents    Document[]
  approvals    ClientApproval[]
  emailLogs    EmailLog[]
  validations  ClientValidation[]
  
  // New compliance relations
  consents     ClientConsent[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("clients")
}

// Client approval workflow tracking
model ClientApproval {
  id       String   @id @default(cuid())
  clientId String
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  // Approval details
  status         ClientApprovalStatus @default(PENDING_APPROVAL)
  requestedBy    String
  requestedAt    DateTime @default(now())
  
  // Review details
  reviewedBy     String?
  reviewedAt     DateTime?
  approvalNotes  String?
  rejectionReason String?
  
  // Supporting documentation
  documents      String[] // Array of document URLs/paths
  validationChecks Json?   // Validation results summary
  
  // Workflow metadata
  workflowStep   String   // Current step in approval process
  priority       ApprovalPriority @default(NORMAL)
  deadline       DateTime?
  
  // Audit
  immudbTxId     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("client_approvals")
}

// Email tracking and delivery system
model EmailLog {
  id           String   @id @default(cuid())
  clientId     String?
  client       Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  
  // Email details
  type         EmailType
  recipient    String   // Email address
  subject      String
  template     String   // Template name/ID
  language     String   @default("nl")
  
  // Content & data
  templateData Json?    // Data used for template rendering
  htmlContent  String?  // Generated HTML content
  textContent  String?  // Generated text content
  
  // Delivery tracking
  status       EmailStatus @default(PENDING)
  sentAt       DateTime?
  deliveredAt  DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  
  // Confirmation tracking (for client confirmations)
  confirmationToken String?
  confirmedAt       DateTime?
  confirmationData  Json?
  
  // Error handling
  errorMessage String?
  retryCount   Int      @default(0)
  maxRetries   Int      @default(3)
  
  // Provider tracking
  provider     String?  // Email service provider
  providerMessageId String?
  
  // Security
  ipAddress    String?
  userAgent    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("email_logs")
}

// Client validation process tracking
model ClientValidation {
  id       String   @id @default(cuid())
  clientId String
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  // Validation type and status
  validationType ValidationMethod
  status         ValidationStatus @default(PENDING)
  
  // Specific validation checks
  kvkCheck       Json?  // KVK validation result details
  btwCheck       Json?  // BTW validation result details
  ibanCheck      Json?  // IBAN validation result details
  emailCheck     Json?  // Email validation result details
  phoneCheck     Json?  // Phone validation result details
  addressCheck   Json?  // Address validation result details
  
  // Validation metadata
  requestedBy    String
  requestedAt    DateTime @default(now())
  validatedBy    String?
  validatedAt    DateTime?
  
  // Results and documentation
  overallScore   Decimal? @db.Decimal(3,2) // 0.00 to 1.00
  findings       Json?    // Detailed validation findings
  recommendations String? // Validation recommendations
  
  // Notes and documentation
  notes          String?
  documents      String[] // Supporting documents
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("client_validations")
}

// Role-based access control
model UserRole {
  id     String   @id @default(cuid())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  role         UserRoleType
  permissions  String[]     // Array of permission strings
  
  // Role metadata
  assignedBy   String
  assignedAt   DateTime @default(now())
  expiresAt    DateTime?
  isActive     Boolean @default(true)
  
  // Scope restrictions (optional)
  scopeType    String?  // 'CLIENT', 'INVOICE', 'GLOBAL'
  scopeId      String?  // Specific entity ID if scoped
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_roles")
}

// Admin notification system
model AdminNotification {
  id       String   @id @default(cuid())
  
  // Notification details
  type         NotificationType
  title        String
  message      String
  priority     NotificationPriority @default(MEDIUM)
  
  // Target audience
  targetRoles  String[] // Array of roles that should see this
  targetUsers  String[] // Specific user IDs (optional)
  
  // Related entities
  entityType   String?  // 'CLIENT', 'INVOICE', 'CREDITOR'
  entityId     String?  // Related entity ID
  
  // Action required
  actionRequired Boolean @default(false)
  actionUrl     String?
  actionLabel   String?
  
  // Lifecycle
  publishedAt   DateTime?
  expiresAt     DateTime?
  isActive      Boolean @default(true)
  
  // Tracking
  viewedBy      String[] // Array of user IDs who have viewed
  acknowledgedBy String[] // Array of user IDs who have acknowledged
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admin_notifications")
}

// Legal Document Management
model LegalDocument {
  id             String   @id @default(cuid())
  
  // Document metadata
  type           LegalDocumentType
  title          String
  description    String?
  version        String   @default("1.0")
  language       String   @default("nl")
  
  // Content
  content        String   // HTML/Markdown content
  templateData   Json?    // Dynamic template variables
  
  // Status and lifecycle
  status         DocumentStatus @default(DRAFT)
  publishedAt    DateTime?
  effectiveFrom  DateTime @default(now())
  expiresAt      DateTime?
  
  // Legal metadata
  jurisdiction   String   @default("Netherlands")
  legalBasis     String?  // GDPR legal basis, Wwft article, etc.
  complianceStandard String[] // ISO27001, PSD2, etc.
  
  // Version control
  parentVersion  String? // Previous version ID
  changeReason   String?
  approvedBy     String?
  approvedAt     DateTime?
  
  // Relations
  signatures     ESignature[]
  consents       ClientConsent[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("legal_documents")
}

// Client Consent Management (GDPR)
model ClientConsent {
  id             String   @id @default(cuid())
  clientId       String?
  userId         String?
  client         Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  user           User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Document reference
  documentId     String
  document       LegalDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  // Consent details
  consentType    ConsentType
  purpose        String   // Processing purpose
  legalBasis     GDPRLegalBasis
  
  // Consent status
  status         ConsentStatus @default(PENDING)
  givenAt        DateTime?
  withdrawnAt    DateTime?
  expiredAt      DateTime?
  
  // Tracking metadata
  ipAddress      String?
  userAgent      String?
  method         ConsentMethod @default(WEB_FORM)
  evidence       Json?    // Additional evidence of consent
  
  // Data processing scope
  dataCategories String[] // What data is processed
  retentionPeriod Int?    // Days to retain
  
  // Third party sharing
  thirdPartySharing Boolean @default(false)
  thirdParties   String[] // List of third parties
  
  // Audit trail
  auditTrail     Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("client_consents")
}

// Digital Signature System
model ESignature {
  id             String   @id @default(cuid())
  
  // Signer information
  signerId       String?
  signerEmail    String
  signerName     String
  signerRole     String?
  
  // Document reference
  documentId     String
  document       LegalDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  // Signature data
  signatureData  String   // Base64 encoded signature image
  signatureType  SignatureType @default(DRAWN)
  
  // Legal validity data
  timestamp      DateTime @default(now())
  ipAddress      String
  userAgent      String?
  location       String?  // GPS coordinates if available
  
  // Certificate and verification
  certificateId  String?
  hashValue      String   // Document hash at time of signing
  verificationCode String @unique
  
  // Status and workflow
  status         SignatureStatus @default(PENDING)
  signedAt       DateTime?
  witnessedBy    String?
  witnessedAt    DateTime?
  
  // Compliance metadata
  complianceLevel ComplianceLevel @default(STANDARD)
  auditTrail     Json?
  
  // Relations
  verifications  SignatureVerification[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("e_signatures")
}

// Signature Verification Log
model SignatureVerification {
  id            String     @id @default(cuid())
  signatureId   String
  signature     ESignature @relation(fields: [signatureId], references: [id], onDelete: Cascade)
  
  // Verification details
  verifiedBy    String?
  verificationType VerificationType
  result        VerificationResult
  
  // Technical verification
  hashMatches   Boolean
  timestampValid Boolean
  certificateValid Boolean?
  
  // Metadata
  verifiedAt    DateTime @default(now())
  notes         String?
  
  @@map("signature_verifications")
}

// Wwft (Anti-Money Laundering) Compliance
model WwftCheck {
  id             String   @id @default(cuid())
  
  // Subject entity
  entityType     String   // Client, Creditor, User
  entityId       String
  
  // Customer Due Diligence
  cddLevel       CDDLevel @default(SIMPLIFIED)
  riskLevel      RiskLevel @default(LOW)
  
  // Identity verification
  identityVerified Boolean @default(false)
  identityDocuments String[] // Document URLs
  identityVerifiedAt DateTime?
  identityVerifiedBy String?
  
  // Beneficial ownership
  beneficialOwnership Json? // Ownership structure
  beneficialOwnersVerified Boolean @default(false)
  
  // PEP (Politically Exposed Person) check
  pepCheck       Boolean @default(false)
  pepStatus      PEPStatus @default(NOT_PEP)
  pepCheckDate   DateTime?
  
  // Sanctions screening
  sanctionsCheck Boolean @default(false)
  sanctionsResult SanctionsResult @default(CLEAR)
  sanctionsCheckDate DateTime?
  
  // Transaction monitoring
  monitoringEnabled Boolean @default(true)
  monitoringLevel MonitoringLevel @default(STANDARD)
  
  // Record keeping (5 years minimum)
  recordsRetainUntil DateTime
  
  // Status and compliance
  status         ComplianceStatus @default(PENDING)
  completedAt    DateTime?
  reviewedBy     String?
  reviewedAt     DateTime?
  
  // Next review
  nextReviewDate DateTime
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("wwft_checks")
}

// PSD2 Strong Customer Authentication
model PSD2Authentication {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Authentication factors
  knowledgeFactor String? // Something you know (password)
  possessionFactor String? // Something you have (device)
  inherenceFactor String? // Something you are (biometric)
  
  // Transaction context
  transactionId  String?
  amount         Decimal? @db.Decimal(10,2)
  payee          String?
  transactionType String? // Payment initiation, account information
  
  // Authentication status
  status         AuthenticationStatus @default(PENDING)
  authenticatedAt DateTime?
  expiresAt      DateTime
  
  // Risk assessment
  riskScore      Decimal? @db.Decimal(3,2) // 0.00 to 1.00
  exemptionApplied Boolean @default(false)
  exemptionReason String?
  
  // Metadata
  ipAddress      String
  deviceId       String?
  location       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("psd2_authentications")
}

// Data Retention Management
model DataRetentionPolicy {
  id             String   @id @default(cuid())
  
  // Policy details
  name           String
  description    String?
  dataCategory   String   // Personal data, financial data, etc.
  entityType     String   // User, Client, Invoice, etc.
  
  // Retention rules
  retentionPeriod Int     // Days to retain
  legalBasis     String   // Legal requirement for retention
  jurisdiction   String   @default("Netherlands")
  
  // Deletion rules
  autoDelete     Boolean @default(true)
  deletionMethod DeletionMethod @default(SECURE_DELETE)
  notifyBefore   Int?    // Days before deletion to notify
  
  // Status
  isActive       Boolean @default(true)
  
  // Relations
  retentionRecords DataRetentionRecord[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("data_retention_policies")
}

// Data Retention Records (tracking what gets deleted when)
model DataRetentionRecord {
  id             String   @id @default(cuid())
  policyId       String
  policy         DataRetentionPolicy @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  // Record details
  entityType     String
  entityId       String
  entityData     Json?    // Snapshot of data before deletion
  
  // Deletion tracking
  scheduledFor   DateTime
  deletedAt      DateTime?
  deletionResult DeletionResult?
  
  // Audit
  deletedBy      String?
  verifiedBy     String?
  verifiedAt     DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("data_retention_records")
}

// ISO 27001 Security Controls
model SecurityControl {
  id             String   @id @default(cuid())
  
  // Control identification
  controlId      String   @unique // A.5.1.1, A.6.1.2, etc.
  title          String
  description    String
  category       String   // Access Control, Cryptography, etc.
  
  // Implementation
  implementationStatus ImplementationStatus @default(NOT_IMPLEMENTED)
  implementedBy  String?
  implementedAt  DateTime?
  
  // Evidence and documentation
  evidence       String[] // Document URLs
  procedures     String?  // Implementation procedures
  responsibleParty String?
  
  // Risk assessment
  riskLevel      RiskLevel @default(MEDIUM)
  riskMitigation String?
  
  // Review and audit
  lastReviewed   DateTime?
  reviewedBy     String?
  nextReview     DateTime?
  auditFindings  String?
  
  // Compliance mapping
  isoRequirement String?  // ISO 27001 clause
  otherStandards String[] // PCI DSS, SOX, etc.
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("security_controls")
}

// Business Continuity (ISO 22301)
model BusinessContinuityPlan {
  id             String   @id @default(cuid())
  
  // Plan details
  name           String
  description    String?
  scope          String   // What business processes are covered
  version        String   @default("1.0")
  
  // Risk assessment
  businessImpactAnalysis Json? // BIA results
  riskAssessment Json?         // Risk analysis
  
  // Recovery objectives
  rto            Int?     // Recovery Time Objective (hours)
  rpo            Int?     // Recovery Point Objective (hours)
  mtpd           Int?     // Maximum Tolerable Period of Disruption
  
  // Plan content
  procedures     String   // Recovery procedures
  contacts       Json?    // Emergency contacts
  resources      Json?    // Required resources
  
  // Testing and maintenance
  lastTested     DateTime?
  testedBy       String?
  testResults    String?
  nextTest       DateTime?
  
  // Status
  status         PlanStatus @default(DRAFT)
  approvedBy     String?
  approvedAt     DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("business_continuity_plans")
}



model Invoice {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId      String
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  invoiceNumber String   @unique
  
  // Enhanced invoice details
  title         String?
  description   String
  notes         String?
  
  // Amounts
  subtotal      Decimal  @db.Decimal(10,2) // Subtotal excl. BTW
  btwAmount     Decimal  @db.Decimal(10,2) // BTW bedrag
  totalAmount   Decimal  @db.Decimal(10,2) // Total incl. BTW
  btwRate       Int      @default(21) // BTW percentage
  
  // Due date management
  status        InvoiceStatus @default(DRAFT)
  issueDate     DateTime @default(now())
  dueDate       DateTime
  dueDateType   DueDateType @default(CUSTOM) // Standard periods or custom
  
  // PDF and delivery
  pdfPath       String?
  pdfGenerated  Boolean @default(false)
  pdfGeneratedAt DateTime?
  emailSent     Boolean @default(false)
  emailSentAt   DateTime?
  
  // Payment tracking
  paymentStatus PaymentStatus @default(PENDING)
  paidAmount    Decimal @db.Decimal(10,2) @default(0)
  paidAt        DateTime?
  paymentMethod PaymentMethod?
  paymentReference String?
  
  // Late payment tracking
  remindersSent Int @default(0)
  lastReminderAt DateTime?
  interestRate  Decimal? @db.Decimal(5,2) // Late payment interest rate
  
  // Audit fields
  createdBy        String?
  updatedBy        String?
  version          Int      @default(1)
  immudbTxId       String?
  
  // Compliance fields
  dataRetentionUntil DateTime?
  complianceStatus   ComplianceStatus @default(PENDING)
  lastComplianceCheck DateTime?
  
  // Relations
  lineItems     InvoiceLineItem[]
  btwRecord     BTWRecord?
  taxReservation TaxReservation?
  emailLogs     InvoiceEmailLog[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("invoices")
}

// Enhanced invoice line items with unit types and standard services
model InvoiceLineItem {
  id            String   @id @default(cuid())
  invoiceId     String
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  // Service reference (optional)
  standardServiceId String?
  standardService   StandardService? @relation(fields: [standardServiceId], references: [id], onDelete: SetNull)
  
  // Line item details
  description   String
  quantity      Decimal  @db.Decimal(10,2) // Support fractional quantities (e.g., 1.5 hours)
  unitType      InvoiceUnitType @default(AMOUNT) // Hours, amount, etc.
  rate          Decimal  @db.Decimal(10,2) // Rate per unit
  amount        Decimal  @db.Decimal(10,2) // Total line amount
  
  // Optional details
  notes         String?
  category      String? // For categorizing line items
  
  // Ordering
  sortOrder     Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("invoice_line_items")
}

// Standard services for quick invoice creation
model StandardService {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Service details
  name        String
  description String?
  category    String? // For organizing services
  
  // Pricing
  defaultRate Decimal  @db.Decimal(10,2)
  unitType    InvoiceUnitType @default(HOURS)
  
  // Settings
  isActive    Boolean @default(true)
  isDefault   Boolean @default(false) // Mark as default service
  
  // Usage tracking
  timesUsed   Int     @default(0)
  lastUsedAt  DateTime?
  
  // Relations
  lineItems   InvoiceLineItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("standard_services")
}

// Email tracking specifically for invoices
model InvoiceEmailLog {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  // Email details
  emailType InvoiceEmailType @default(INVOICE_SENT)
  recipient String
  subject   String
  
  // Delivery tracking
  status    EmailStatus @default(PENDING)
  sentAt    DateTime?
  openedAt  DateTime?
  clickedAt DateTime?
  
  // Error handling
  errorMessage String?
  retryCount   Int @default(0)
  
  // Provider details
  provider     String? // Email service provider
  providerMessageId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("invoice_email_logs")
}

// DEPRECATED: Appointment model - kept for data integrity
// Note: This model is deprecated as appointments are not relevant for Trust.io
// Existing data is preserved but new appointments should not be created
model Appointment {
  id          String   @id @default(cuid())
  userId      String
  clientId    String
  
  title       String
  description String?
  date        DateTime
  duration    Int      // in minutes
  status      AppointmentStatus @default(SCHEDULED)
  location    String?
  
  // Deprecation tracking
  isDeprecated Boolean @default(true)
  deprecatedAt DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("appointments")
}

model Document {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId      String?
  client        Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  
  title         String
  description   String?
  type          DocumentType @default(OTHER)
  status        DocumentStatus @default(DRAFT)
  
  // File information
  fileName      String?
  fileSize      Int?
  mimeType      String?
  filePath      String?
  fileUrl       String?
  
  // Document lifecycle
  uploadedAt    DateTime?
  signedAt      DateTime?
  completedAt   DateTime?
  expiresAt     DateTime?
  
  // Version control
  version       Int      @default(1)
  parentId      String?  // For document versioning
  isLatest      Boolean  @default(true)
  
  // Security & access
  accessLevel   AccessLevel @default(PRIVATE)
  sharedWith    String[] // Array of user IDs
  downloadCount Int      @default(0)
  lastAccessedAt DateTime?
  
  // Audit fields
  createdBy        String?
  updatedBy        String?
  immudbTxId       String?
  
  // Compliance fields
  dataRetentionUntil DateTime?
  complianceStatus   ComplianceStatus @default(PENDING)
  lastComplianceCheck DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("documents")
}

// BTW record tracking
model BTWRecord {
  id          String   @id @default(cuid())
  invoiceId   String   @unique
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  // BTW calculation details
  subtotal    Decimal  @db.Decimal(10,2)
  btwRate     Int      // 21, 9, or 0
  btwAmount   Decimal  @db.Decimal(10,2)
  totalAmount Decimal  @db.Decimal(10,2)
  
  // BTW period and status
  quarter     String   // Q1-2024
  year        Int
  status      BTWStatus @default(PENDING)
  
  // Payment tracking
  dueDate     DateTime
  paidDate    DateTime?
  paidAmount  Decimal? @db.Decimal(10,2)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("btw_records")
}

// Tax reservation tracking
model TaxReservation {
  id          String   @id @default(cuid())
  invoiceId   String   @unique
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  // Reservation details
  reservationAmount Decimal  @db.Decimal(10,2)
  reservationRate   Decimal  @db.Decimal(5,2) // Percentage
  baseAmount       Decimal  @db.Decimal(10,2) // Amount reservation is based on
  
  // Tax year and status
  taxYear     Int
  status      TaxReservationStatus @default(ACTIVE)
  
  // Usage tracking
  usedAmount  Decimal  @db.Decimal(10,2) @default(0)
  usedAt      DateTime?
  releasedAt  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("tax_reservations")
}

// Enums
enum ValidationStatus {
  PENDING
  IN_REVIEW
  VALIDATED
  REJECTED
  EXPIRED
}

enum BusinessType {
  ZZP
  BV
  VOF
  EENMANSZAAK
  OTHER
}

enum OnboardingStep {
  BASIC_INFO
  BUSINESS_DETAILS
  BANKING_INFO
  VERIFICATION
  COMPLETED
}

enum ValidationMethod {
  AUTOMATIC
  MANUAL
  HYBRID
}

enum PaymentStatus {
  PENDING
  SCHEDULED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  SEPA_DIRECT_DEBIT
  MANUAL
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  VALIDATE
  REJECT
  APPROVE
  PAYMENT_PROCESS
  STATUS_CHANGE
}

enum ComplianceLevel {
  BASIC
  STANDARD
  ENHANCED
  CRITICAL
}

enum ComplianceStatus {
  PENDING
  COMPLIANT
  NON_COMPLIANT
  UNDER_REVIEW
  REQUIRES_ACTION
}

enum ComplianceCheckType {
  DATA_COMPLETENESS
  VALIDATION_STATUS
  DOCUMENT_VERIFICATION
  AUDIT_TRAIL
  RETENTION_POLICY
}

enum ClientOnboardingStatus {
  PENDING_VALIDATION
  EMAIL_SENT
  CLIENT_CONFIRMED
  ADMIN_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}

enum ClientApprovalStatus {
  PENDING_APPROVAL
  UNDER_REVIEW
  APPROVED
  REJECTED
  REQUIRES_CHANGES
  ESCALATED
}

enum ApprovalPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum EmailType {
  CLIENT_CONFIRMATION
  ADMIN_NOTIFICATION
  APPROVAL_NOTIFICATION
  REJECTION_NOTIFICATION
  REMINDER
  WELCOME
  PASSWORD_RESET
  INVOICE_NOTIFICATION
  PAYMENT_REMINDER
}

enum EmailStatus {
  PENDING
  QUEUED
  SENT
  DELIVERED
  OPENED
  CLICKED
  FAILED
  BOUNCED
  SPAM
}

enum UserRoleType {
  SUPER_ADMIN
  ADMIN
  MANAGER
  ACCOUNTANT
  USER
  CLIENT_VIEWER
  INVOICE_MANAGER
  CREDITOR_MANAGER
  READ_ONLY
}

enum NotificationType {
  VALIDATION_REQUIRED
  PAYMENT_DUE
  CREDITOR_VALIDATED
  SYSTEM_ALERT
  BTW_DEADLINE
  CLIENT_APPROVAL_REQUIRED
  INVOICE_PERMISSION_REQUEST
  COMPLIANCE_WARNING
  SECURITY_ALERT
  WORKFLOW_UPDATE
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DocumentType {
  CONTRACT
  INVOICE
  AGREEMENT
  IDENTITY
  BANK_STATEMENT
  TAX_DOCUMENT
  OTHER
}

enum DocumentStatus {
  DRAFT
  PENDING_SIGNATURE
  SIGNED
  COMPLETED
  EXPIRED
  CANCELLED
  REVIEW          // Under review
  PUBLISHED       // Published/active legal document
  ARCHIVED        // Archived document
  WITHDRAWN       // Withdrawn legal document
}

enum AccessLevel {
  PRIVATE
  SHARED
  PUBLIC
  RESTRICTED
}

// Enhanced Invoice enum types
enum DueDateType {
  SEVEN_DAYS
  FOURTEEN_DAYS
  THIRTY_DAYS
  CUSTOM
}

enum InvoiceUnitType {
  HOURS
  AMOUNT
  DAYS
  PIECES
  KILOMETERS
  PERCENTAGE
  OTHER
}

enum InvoiceEmailType {
  INVOICE_SENT
  REMINDER_SENT
  FINAL_NOTICE
  PAYMENT_RECEIVED
  INVOICE_CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum BTWStatus {
  PENDING
  RESERVED
  PREPAID
  PAID
  OVERDUE
}

enum TaxReservationStatus {
  ACTIVE
  USED
  RELEASED
  EXPIRED
}

// DEPRECATED: AppointmentStatus - kept for data integrity
enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

// ===== NEW COMPLIANCE & LEGAL ENUMS =====

// Legal Document Types
enum LegalDocumentType {
  TERMS_CONDITIONS        // Algemene Voorwaarden
  PRIVACY_POLICY         // Privacy Policy
  AUTHORIZATION_AGREEMENT // Machtigingsovereenkomst
  COOKIE_POLICY          // Cookie Policy
  PROCESSOR_AGREEMENT    // Verwerkersovereenkomst
  GDPR_CONSENT          // GDPR Toestemmingsverklaring
  SERVICE_AGREEMENT     // Dienstverleningsovereenkomst
  NDA                   // Non-Disclosure Agreement
}



// GDPR Consent Types
enum ConsentType {
  DATA_PROCESSING      // Basic data processing
  MARKETING           // Marketing communications
  PROFILING           // Automated profiling
  THIRD_PARTY_SHARING // Sharing with third parties
  COOKIES             // Cookie consent
  NEWSLETTER          // Newsletter subscription
  RESEARCH            // Research participation
}

// GDPR Legal Basis
enum GDPRLegalBasis {
  CONSENT            // Article 6(1)(a) - Consent
  CONTRACT           // Article 6(1)(b) - Contract performance
  LEGAL_OBLIGATION   // Article 6(1)(c) - Legal obligation
  VITAL_INTERESTS    // Article 6(1)(d) - Vital interests
  PUBLIC_TASK        // Article 6(1)(e) - Public task
  LEGITIMATE_INTERESTS // Article 6(1)(f) - Legitimate interests
}

// Consent Status
enum ConsentStatus {
  PENDING
  GIVEN
  WITHDRAWN
  EXPIRED
  INVALID
}

// Consent Collection Method
enum ConsentMethod {
  WEB_FORM          // Online form
  EMAIL_CONFIRMATION // Email confirmation
  PAPER_FORM        // Physical paper form
  PHONE_CONSENT     // Phone consent
  API               // API consent
  IMPORT            // Data import
}

// Digital Signature Types
enum SignatureType {
  DRAWN             // Hand-drawn signature
  TYPED             // Typed signature
  UPLOADED          // Uploaded signature image
  BIOMETRIC         // Biometric signature
  CERTIFICATE       // Digital certificate
}

// Signature Status
enum SignatureStatus {
  PENDING           // Awaiting signature
  SIGNED            // Successfully signed
  REJECTED          // Signature rejected
  EXPIRED           // Signature request expired
  INVALID           // Invalid signature
  WITNESSED         // Witnessed signature
}

// Signature Verification Types
enum VerificationType {
  HASH_VERIFICATION    // Document hash verification
  TIMESTAMP_CHECK      // Timestamp verification
  CERTIFICATE_CHECK    // Certificate validation
  BIOMETRIC_MATCH      // Biometric verification
  MANUAL_REVIEW        // Manual verification
}

// Verification Results
enum VerificationResult {
  VALID
  INVALID
  INCONCLUSIVE
  EXPIRED
  REVOKED
  PENDING
}

// Wwft Customer Due Diligence Levels
enum CDDLevel {
  SIMPLIFIED        // Simplified CDD
  STANDARD          // Standard CDD
  ENHANCED          // Enhanced CDD
}

// Risk Level Assessment
enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// PEP (Politically Exposed Person) Status
enum PEPStatus {
  NOT_PEP          // Not a PEP
  DOMESTIC_PEP     // Domestic PEP
  FOREIGN_PEP      // Foreign PEP
  INTERNATIONAL_PEP // International organization PEP
  FAMILY_MEMBER    // Family member of PEP
  CLOSE_ASSOCIATE  // Close associate of PEP
}

// Sanctions Screening Results
enum SanctionsResult {
  CLEAR             // No sanctions matches
  POTENTIAL_MATCH   // Potential match requires review
  CONFIRMED_MATCH   // Confirmed sanctions match
  FALSE_POSITIVE    // Confirmed false positive
  UNDER_REVIEW      // Manual review in progress
}

// Transaction Monitoring Level
enum MonitoringLevel {
  BASIC            // Basic monitoring
  STANDARD         // Standard monitoring
  ENHANCED         // Enhanced monitoring
  CONTINUOUS       // Continuous monitoring
}

// PSD2 Authentication Status
enum AuthenticationStatus {
  PENDING          // Authentication pending
  AUTHENTICATED    // Successfully authenticated
  FAILED           // Authentication failed
  EXPIRED          // Authentication expired
  EXEMPTED         // Exemption applied
}

// Data Deletion Methods
enum DeletionMethod {
  SOFT_DELETE      // Mark as deleted
  SECURE_DELETE    // Secure deletion
  ANONYMIZATION    // Data anonymization
  PSEUDONYMIZATION // Data pseudonymization
  ARCHIVAL         // Move to archive
}

// Data Deletion Results
enum DeletionResult {
  SUCCESS          // Successfully deleted
  PARTIAL_SUCCESS  // Partially deleted
  FAILED           // Deletion failed
  PENDING          // Deletion pending
  CANCELLED        // Deletion cancelled
  ERROR            // Deletion error
}

// ISO 27001 Implementation Status
enum ImplementationStatus {
  NOT_IMPLEMENTED  // Control not implemented
  PARTIALLY_IMPLEMENTED // Partially implemented
  IMPLEMENTED      // Fully implemented
  NOT_APPLICABLE   // Not applicable
  UNDER_REVIEW     // Under review
}

// Business Continuity Plan Status
enum PlanStatus {
  DRAFT           // Plan in draft
  REVIEW          // Under review
  APPROVED        // Approved plan
  ACTIVE          // Active plan
  ARCHIVED        // Archived plan
  SUPERSEDED      // Superseded by new version
}
