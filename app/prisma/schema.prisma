
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/zzp-trust/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Core User model - extended for onboarding
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Profile information
  profile   UserProfile?
  
  // Demo related
  isDemo    Boolean @default(false)
  demoExpiresAt DateTime?
  
  // Relations
  clients     Client[]
  invoices    Invoice[]
  appointments Appointment[]
  documents   Document[]
  auditLogs   AuditLog[]
  creditors   Creditor[]
  roles       UserRole[]
  standardServices StandardService[]
  
  @@map("users")
}

// Extended user profile for business information
model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Business details (KvK registration) - MANDATORY
  companyName       String
  kvkNumber        String   @unique
  vatNumber        String   @unique
  
  // Contact information - MANDATORY
  phone            String
  address          String
  postalCode       String
  city            String
  country          String   @default("Netherlands")
  
  // Banking details - MANDATORY
  iban            String   @unique
  bankName        String
  accountHolder   String
  
  // Validation status
  validationStatus ValidationStatus @default(PENDING)
  validatedAt      DateTime?
  validatedBy      String?
  rejectionReason  String?
  
  // Business type
  businessType     BusinessType @default(ZZP)
  
  // Onboarding
  onboardingStep   OnboardingStep @default(BASIC_INFO)
  onboardingCompletedAt DateTime?
  
  // Audit fields
  createdBy        String?
  updatedBy        String?
  version          Int      @default(1)
  immudbTxId       String?
  
  // Compliance fields
  dataRetentionUntil DateTime?
  complianceStatus   ComplianceStatus @default(PENDING)
  lastComplianceCheck DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_profiles")
}

// Creditors/Suppliers model
model Creditor {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic information - MANDATORY
  name        String
  email       String
  phone       String
  
  // Business details - MANDATORY
  companyName String
  kvkNumber   String   @unique
  vatNumber   String   @unique
  
  // Contact details - MANDATORY
  address     String
  postalCode  String
  city        String
  country     String   @default("Netherlands")
  
  // Banking information - MANDATORY
  iban        String   @unique
  bankName    String
  accountHolder String
  
  // Validation
  validationStatus ValidationStatus @default(PENDING)
  validatedAt      DateTime?
  validatedBy      String?
  rejectionReason  String?
  
  // Settings
  isActive    Boolean @default(true)
  
  // Audit fields
  createdBy        String?
  updatedBy        String?
  version          Int      @default(1)
  immudbTxId       String?
  
  // Compliance fields
  dataRetentionUntil DateTime?
  complianceStatus   ComplianceStatus @default(PENDING)
  lastComplianceCheck DateTime?
  
  // Relations
  validations CreditorValidation[]
  payments    Payment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("creditors")
}

// Creditor validation process tracking
model CreditorValidation {
  id          String   @id @default(cuid())
  creditorId  String
  creditor    Creditor @relation(fields: [creditorId], references: [id], onDelete: Cascade)
  
  validationType ValidationMethod
  status         ValidationStatus @default(PENDING)
  
  // Validation details
  requestedBy    String
  requestedAt    DateTime @default(now())
  validatedBy    String?
  validatedAt    DateTime?
  
  // Documentation
  documents      String[] // Array of document URLs/paths
  notes          String?
  rejectionReason String?
  
  // Automated validation results
  kvkValidated   Boolean?
  ibanValidated  Boolean?
  emailValidated Boolean?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("creditor_validations")
}

// Payment tracking for creditors
model Payment {
  id          String   @id @default(cuid())
  creditorId  String
  creditor    Creditor @relation(fields: [creditorId], references: [id], onDelete: Cascade)
  
  amount      Decimal  @db.Decimal(10,2)
  description String?
  reference   String?
  
  status      PaymentStatus @default(PENDING)
  
  scheduledAt DateTime?
  processedAt DateTime?
  
  // Payment method
  method      PaymentMethod @default(BANK_TRANSFER)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("payments")
}

// Audit logging for all critical actions
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  action    AuditAction
  entity    String   // e.g., "Creditor", "Payment", "User"
  entityId  String   // ID of the affected entity
  
  // Change details
  oldValues Json?
  newValues Json?
  
  // Context
  ipAddress String?
  userAgent String?
  sessionId String?
  
  // ImmuDB integration
  immudbTxId     String?
  immudbVerified Boolean @default(false)
  immudbHash     String?
  
  // Compliance & retention
  retentionUntil DateTime?
  complianceLevel ComplianceLevel @default(STANDARD)
  
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}

// ImmuDB transaction tracking
model ImmuDBTransaction {
  id           String   @id @default(cuid())
  txId         String   @unique
  timestamp    DateTime
  verified     Boolean  @default(false)
  hash         String
  
  // Related audit logs
  auditLogIds  String[]
  
  // Verification details
  verifiedAt   DateTime?
  verificationHash String?
  
  createdAt DateTime @default(now())
  
  @@map("immudb_transactions")
}

// Compliance audit trail
model ComplianceAudit {
  id               String   @id @default(cuid())
  entity           String   // Model name
  entityId         String   // Entity ID
  
  checkType        ComplianceCheckType
  status           ComplianceStatus
  
  // Check details
  requiredFields   String[] // Required field names
  missingFields    String[] // Missing field names
  validationErrors Json?
  
  // Resolution
  resolvedAt       DateTime?
  resolvedBy       String?
  resolution       String?
  
  // Schedule info
  scheduledAt      DateTime?
  nextCheckAt      DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("compliance_audits")
}

// Enhanced Client model with complete onboarding flow
model Client {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic information - MANDATORY
  name         String
  email        String
  phone        String
  
  // Business details - MANDATORY for business clients
  company      String?
  kvkNumber    String?   @unique
  vatNumber    String?   @unique
  businessType BusinessType @default(ZZP)
  
  // Contact details - MANDATORY
  address      String?
  postalCode   String?
  city         String?
  country      String?   @default("Netherlands")
  
  // Admin/Accounting contact - MANDATORY for business clients
  adminContactName    String?
  adminContactEmail   String?
  adminContactPhone   String?
  adminDepartment     String?   // Administratie afdeling
  
  // Banking information - MANDATORY
  iban            String?   @unique
  bankName        String?
  accountHolder   String?
  postboxNumber   String?   // Optional postbus nummer
  
  // Onboarding workflow status
  onboardingStatus    ClientOnboardingStatus @default(PENDING_VALIDATION)
  onboardingStep      OnboardingStep @default(BASIC_INFO)
  onboardingCompletedAt DateTime?
  
  // Validation status - MANDATORY for invoicing
  validationStatus    ValidationStatus @default(PENDING)
  validatedAt         DateTime?
  validatedBy         String?
  rejectionReason     String?
  
  // Admin approval - REQUIRED before invoicing
  approvalStatus      ClientApprovalStatus @default(PENDING_APPROVAL)
  approvedAt          DateTime?
  approvedBy          String?
  approvalNotes       String?
  
  // Email confirmation tracking
  emailConfirmed      Boolean @default(false)
  emailConfirmedAt    DateTime?
  emailConfirmationToken String?
  emailConfirmationExpiresAt DateTime?
  
  // KVK & BTW validation results
  kvkValidated        Boolean @default(false)
  kvkValidatedAt      DateTime?
  btwValidated        Boolean @default(false)
  btwValidatedAt      DateTime?
  ibanValidated       Boolean @default(false)
  ibanValidatedAt     DateTime?
  
  // Settings & Status
  isActive            Boolean @default(true)
  canCreateInvoices   Boolean @default(false) // Security control
  invoicePermissionGrantedAt DateTime?
  invoicePermissionGrantedBy String?
  
  totalInvoiced Decimal @db.Decimal(10,2) @default(0)
  
  // Audit fields
  createdBy        String?
  updatedBy        String?
  version          Int      @default(1)
  immudbTxId       String?
  
  // Compliance fields
  dataRetentionUntil DateTime?
  complianceStatus   ComplianceStatus @default(PENDING)
  lastComplianceCheck DateTime?
  
  // Relations
  invoices     Invoice[]
  appointments Appointment[]
  documents    Document[]
  approvals    ClientApproval[]
  emailLogs    EmailLog[]
  validations  ClientValidation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("clients")
}

// Client approval workflow tracking
model ClientApproval {
  id       String   @id @default(cuid())
  clientId String
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  // Approval details
  status         ClientApprovalStatus @default(PENDING_APPROVAL)
  requestedBy    String
  requestedAt    DateTime @default(now())
  
  // Review details
  reviewedBy     String?
  reviewedAt     DateTime?
  approvalNotes  String?
  rejectionReason String?
  
  // Supporting documentation
  documents      String[] // Array of document URLs/paths
  validationChecks Json?   // Validation results summary
  
  // Workflow metadata
  workflowStep   String   // Current step in approval process
  priority       ApprovalPriority @default(NORMAL)
  deadline       DateTime?
  
  // Audit
  immudbTxId     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("client_approvals")
}

// Email tracking and delivery system
model EmailLog {
  id           String   @id @default(cuid())
  clientId     String?
  client       Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  
  // Email details
  type         EmailType
  recipient    String   // Email address
  subject      String
  template     String   // Template name/ID
  language     String   @default("nl")
  
  // Content & data
  templateData Json?    // Data used for template rendering
  htmlContent  String?  // Generated HTML content
  textContent  String?  // Generated text content
  
  // Delivery tracking
  status       EmailStatus @default(PENDING)
  sentAt       DateTime?
  deliveredAt  DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  
  // Confirmation tracking (for client confirmations)
  confirmationToken String?
  confirmedAt       DateTime?
  confirmationData  Json?
  
  // Error handling
  errorMessage String?
  retryCount   Int      @default(0)
  maxRetries   Int      @default(3)
  
  // Provider tracking
  provider     String?  // Email service provider
  providerMessageId String?
  
  // Security
  ipAddress    String?
  userAgent    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("email_logs")
}

// Client validation process tracking
model ClientValidation {
  id       String   @id @default(cuid())
  clientId String
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  // Validation type and status
  validationType ValidationMethod
  status         ValidationStatus @default(PENDING)
  
  // Specific validation checks
  kvkCheck       Json?  // KVK validation result details
  btwCheck       Json?  // BTW validation result details
  ibanCheck      Json?  // IBAN validation result details
  emailCheck     Json?  // Email validation result details
  phoneCheck     Json?  // Phone validation result details
  addressCheck   Json?  // Address validation result details
  
  // Validation metadata
  requestedBy    String
  requestedAt    DateTime @default(now())
  validatedBy    String?
  validatedAt    DateTime?
  
  // Results and documentation
  overallScore   Decimal? @db.Decimal(3,2) // 0.00 to 1.00
  findings       Json?    // Detailed validation findings
  recommendations String? // Validation recommendations
  
  // Notes and documentation
  notes          String?
  documents      String[] // Supporting documents
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("client_validations")
}

// Role-based access control
model UserRole {
  id     String   @id @default(cuid())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  role         UserRoleType
  permissions  String[]     // Array of permission strings
  
  // Role metadata
  assignedBy   String
  assignedAt   DateTime @default(now())
  expiresAt    DateTime?
  isActive     Boolean @default(true)
  
  // Scope restrictions (optional)
  scopeType    String?  // 'CLIENT', 'INVOICE', 'GLOBAL'
  scopeId      String?  // Specific entity ID if scoped
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_roles")
}

// Admin notification system
model AdminNotification {
  id       String   @id @default(cuid())
  
  // Notification details
  type         NotificationType
  title        String
  message      String
  priority     NotificationPriority @default(MEDIUM)
  
  // Target audience
  targetRoles  String[] // Array of roles that should see this
  targetUsers  String[] // Specific user IDs (optional)
  
  // Related entities
  entityType   String?  // 'CLIENT', 'INVOICE', 'CREDITOR'
  entityId     String?  // Related entity ID
  
  // Action required
  actionRequired Boolean @default(false)
  actionUrl     String?
  actionLabel   String?
  
  // Lifecycle
  publishedAt   DateTime?
  expiresAt     DateTime?
  isActive      Boolean @default(true)
  
  // Tracking
  viewedBy      String[] // Array of user IDs who have viewed
  acknowledgedBy String[] // Array of user IDs who have acknowledged
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admin_notifications")
}

model Invoice {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId      String
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  invoiceNumber String   @unique
  
  // Enhanced invoice details
  title         String?
  description   String
  notes         String?
  
  // Amounts
  subtotal      Decimal  @db.Decimal(10,2) // Subtotal excl. BTW
  btwAmount     Decimal  @db.Decimal(10,2) // BTW bedrag
  totalAmount   Decimal  @db.Decimal(10,2) // Total incl. BTW
  btwRate       Int      @default(21) // BTW percentage
  
  // Due date management
  status        InvoiceStatus @default(DRAFT)
  issueDate     DateTime @default(now())
  dueDate       DateTime
  dueDateType   DueDateType @default(CUSTOM) // Standard periods or custom
  
  // PDF and delivery
  pdfPath       String?
  pdfGenerated  Boolean @default(false)
  pdfGeneratedAt DateTime?
  emailSent     Boolean @default(false)
  emailSentAt   DateTime?
  
  // Payment tracking
  paymentStatus PaymentStatus @default(PENDING)
  paidAmount    Decimal @db.Decimal(10,2) @default(0)
  paidAt        DateTime?
  paymentMethod PaymentMethod?
  paymentReference String?
  
  // Late payment tracking
  remindersSent Int @default(0)
  lastReminderAt DateTime?
  interestRate  Decimal? @db.Decimal(5,2) // Late payment interest rate
  
  // Audit fields
  createdBy        String?
  updatedBy        String?
  version          Int      @default(1)
  immudbTxId       String?
  
  // Compliance fields
  dataRetentionUntil DateTime?
  complianceStatus   ComplianceStatus @default(PENDING)
  lastComplianceCheck DateTime?
  
  // Relations
  lineItems     InvoiceLineItem[]
  btwRecord     BTWRecord?
  taxReservation TaxReservation?
  emailLogs     InvoiceEmailLog[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("invoices")
}

// Enhanced invoice line items with unit types and standard services
model InvoiceLineItem {
  id            String   @id @default(cuid())
  invoiceId     String
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  // Service reference (optional)
  standardServiceId String?
  standardService   StandardService? @relation(fields: [standardServiceId], references: [id], onDelete: SetNull)
  
  // Line item details
  description   String
  quantity      Decimal  @db.Decimal(10,2) // Support fractional quantities (e.g., 1.5 hours)
  unitType      InvoiceUnitType @default(AMOUNT) // Hours, amount, etc.
  rate          Decimal  @db.Decimal(10,2) // Rate per unit
  amount        Decimal  @db.Decimal(10,2) // Total line amount
  
  // Optional details
  notes         String?
  category      String? // For categorizing line items
  
  // Ordering
  sortOrder     Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("invoice_line_items")
}

// Standard services for quick invoice creation
model StandardService {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Service details
  name        String
  description String?
  category    String? // For organizing services
  
  // Pricing
  defaultRate Decimal  @db.Decimal(10,2)
  unitType    InvoiceUnitType @default(HOURS)
  
  // Settings
  isActive    Boolean @default(true)
  isDefault   Boolean @default(false) // Mark as default service
  
  // Usage tracking
  timesUsed   Int     @default(0)
  lastUsedAt  DateTime?
  
  // Relations
  lineItems   InvoiceLineItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("standard_services")
}

// Email tracking specifically for invoices
model InvoiceEmailLog {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  // Email details
  emailType InvoiceEmailType @default(INVOICE_SENT)
  recipient String
  subject   String
  
  // Delivery tracking
  status    EmailStatus @default(PENDING)
  sentAt    DateTime?
  openedAt  DateTime?
  clickedAt DateTime?
  
  // Error handling
  errorMessage String?
  retryCount   Int @default(0)
  
  // Provider details
  provider     String? // Email service provider
  providerMessageId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("invoice_email_logs")
}

model Appointment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  date        DateTime
  duration    Int      // in minutes
  status      AppointmentStatus @default(SCHEDULED)
  location    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("appointments")
}

model Document {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId      String?
  client        Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  
  title         String
  description   String?
  type          DocumentType @default(OTHER)
  status        DocumentStatus @default(DRAFT)
  
  content       String?
  fileUrl       String?
  signatureUrl  String?
  
  signedAt      DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("documents")
}

// BTW/Tax related models
model BTWRecord {
  id        String   @id @default(cuid())
  invoiceId String   @unique
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  amount    Decimal  @db.Decimal(10,2) // Excl. BTW
  btwAmount Decimal  @db.Decimal(10,2) // BTW bedrag
  btwRate   Int      // BTW percentage
  
  status    BTWStatus @default(PENDING)
  quarter   String   // Q1-2024
  dueDate   DateTime
  paidDate  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("btw_records")
}

model TaxReservation {
  id              String   @id @default(cuid())
  invoiceId       String   @unique
  invoice         Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  amount          Decimal  @db.Decimal(10,2) // Gereserveerd bedrag
  reservationRate Int      // Percentage
  year            Int
  
  status          TaxReservationStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("tax_reservations")
}

// Enums
enum ValidationStatus {
  PENDING
  IN_REVIEW
  VALIDATED
  REJECTED
  EXPIRED
}

enum BusinessType {
  ZZP
  BV
  VOF
  EENMANSZAAK
  OTHER
}

enum OnboardingStep {
  BASIC_INFO
  BUSINESS_DETAILS
  BANKING_INFO
  VERIFICATION
  COMPLETED
}

enum ValidationMethod {
  AUTOMATIC
  MANUAL
  HYBRID
}

enum PaymentStatus {
  PENDING
  SCHEDULED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  SEPA_DIRECT_DEBIT
  MANUAL
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  VALIDATE
  REJECT
  APPROVE
  PAYMENT_PROCESS
  STATUS_CHANGE
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum DocumentType {
  CONTRACT
  INVOICE
  AGREEMENT
  OTHER
}

enum DocumentStatus {
  DRAFT
  PENDING_SIGNATURE
  SIGNED
  COMPLETED
  CANCELLED
}

enum BTWStatus {
  PENDING
  RESERVED
  PREPAID
  PAID
  OVERDUE
}

enum TaxReservationStatus {
  ACTIVE
  USED
  RELEASED
}

// New compliance and audit enums
enum ComplianceStatus {
  PENDING
  COMPLIANT
  NON_COMPLIANT
  UNDER_REVIEW
  REQUIRES_ACTION
  EXPIRED
}

enum ComplianceLevel {
  STANDARD
  ENHANCED
  CRITICAL
  REGULATORY
}

enum ComplianceCheckType {
  MANDATORY_FIELDS
  DATA_VALIDATION
  BUSINESS_RULES
  REGULATORY
  RETENTION_POLICY
  PERIODIC_REVIEW
}

// Client onboarding workflow enums
enum ClientOnboardingStatus {
  PENDING_VALIDATION
  EMAIL_SENT
  CLIENT_CONFIRMED
  ADMIN_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}

enum ClientApprovalStatus {
  PENDING_APPROVAL
  UNDER_REVIEW
  APPROVED
  REJECTED
  REQUIRES_CHANGES
  ESCALATED
}

enum ApprovalPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// Email system enums
enum EmailType {
  CLIENT_CONFIRMATION
  ADMIN_NOTIFICATION
  APPROVAL_NOTIFICATION
  REJECTION_NOTIFICATION
  REMINDER
  WELCOME
  PASSWORD_RESET
  INVOICE_NOTIFICATION
  PAYMENT_REMINDER
}

enum EmailStatus {
  PENDING
  QUEUED
  SENT
  DELIVERED
  OPENED
  CLICKED
  FAILED
  BOUNCED
  SPAM
}

// Role-based access control enums
enum UserRoleType {
  SUPER_ADMIN
  ADMIN
  MANAGER
  ACCOUNTANT
  USER
  CLIENT_VIEWER
  INVOICE_MANAGER
  CREDITOR_MANAGER
  READ_ONLY
}

// Notification system enums
enum NotificationType {
  VALIDATION_REQUIRED
  PAYMENT_DUE
  CREDITOR_VALIDATED
  SYSTEM_ALERT
  BTW_DEADLINE
  CLIENT_APPROVAL_REQUIRED
  INVOICE_PERMISSION_REQUEST
  COMPLIANCE_WARNING
  SECURITY_ALERT
  WORKFLOW_UPDATE
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Enhanced invoice enums
enum DueDateType {
  SEVEN_DAYS    // 7 dagen standaard
  FOURTEEN_DAYS // 14 dagen standaard
  THIRTY_DAYS   // 30 dagen standaard
  CUSTOM        // Aangepaste datum
}

enum InvoiceUnitType {
  HOURS         // Uren × Uurtarief
  AMOUNT        // Vast bedrag
  DAYS          // Dagen × Dagtarief
  PIECES        // Stuks × Stukprijs
  KILOMETERS    // Kilometers × Tarief per km
  PERCENTAGE    // Percentage van totaalbedrag
  OTHER         // Andere eenheid
}

enum InvoiceEmailType {
  INVOICE_SENT      // Factuur verzonden
  REMINDER_SENT     // Herinnering verzonden
  FINAL_NOTICE      // Laatste waarschuwing
  PAYMENT_RECEIVED  // Betaling ontvangen
  INVOICE_CANCELLED // Factuur geannuleerd
}
