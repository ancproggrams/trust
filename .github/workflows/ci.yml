
name: 🚀 Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.x'
  FORCE_COLOR: 1

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: './app/yarn.lock'

      - name: 📦 Install dependencies
        working-directory: ./app
        run: yarn install --frozen-lockfile

      - name: 🔍 Run ESLint
        working-directory: ./app
        run: yarn lint

      - name: 🔍 Type check with TypeScript
        working-directory: ./app
        run: npx tsc --noEmit

      - name: 🎨 Check Prettier formatting
        working-directory: ./app
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

  # Job 2: Build Application
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: './app/yarn.lock'

      - name: 📦 Install dependencies
        working-directory: ./app
        run: yarn install --frozen-lockfile

      - name: 🔧 Generate Prisma Client
        working-directory: ./app
        run: npx prisma generate

      - name: 🏗️ Build Next.js application
        working-directory: ./app
        run: yarn build
        env:
          SKIP_ENV_VALIDATION: 1

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            ./app/.next
            ./app/node_modules/.prisma
          retention-days: 1

  # Job 3: Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: './app/yarn.lock'

      - name: 📦 Install dependencies
        working-directory: ./app
        run: yarn install --frozen-lockfile

      - name: 🔧 Generate Prisma Client
        working-directory: ./app
        run: npx prisma generate

      - name: 🧪 Run unit tests
        working-directory: ./app
        run: yarn test:unit || echo "Unit tests not configured yet"

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v5
        if: always()
        with:
          directory: ./app/coverage
          fail_ci_if_error: false

  # Job 4: Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: trustio_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: './app/yarn.lock'

      - name: 📦 Install dependencies
        working-directory: ./app
        run: yarn install --frozen-lockfile

      - name: 🔧 Generate Prisma Client
        working-directory: ./app
        run: npx prisma generate

      - name: 🗄️ Run database migrations
        working-directory: ./app
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/trustio_test

      - name: 🌱 Seed test database
        working-directory: ./app
        run: npx prisma db seed || echo "No seed script configured"
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/trustio_test

      - name: 🔗 Run integration tests
        working-directory: ./app
        run: yarn test:integration || echo "Integration tests not configured yet"
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/trustio_test
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000

  # Job 5: E2E Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: trustio_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: './app/yarn.lock'

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ./app

      - name: 📦 Install dependencies
        working-directory: ./app
        run: yarn install --frozen-lockfile

      - name: 🎭 Install Playwright
        working-directory: ./app
        run: npx playwright install --with-deps

      - name: 🗄️ Setup test database
        working-directory: ./app
        run: |
          npx prisma migrate deploy
          npx prisma db seed || echo "No seed script"
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/trustio_e2e

      - name: 🎭 Run E2E tests
        working-directory: ./app
        run: yarn test:e2e || echo "E2E tests not configured yet"
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/trustio_e2e
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: ./app/test-results/
          retention-days: 7

  # Job 6: Prisma Validation
  prisma-validation:
    name: 🗄️ Prisma Schema Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: './app/yarn.lock'

      - name: 📦 Install dependencies
        working-directory: ./app
        run: yarn install --frozen-lockfile

      - name: 🔍 Validate Prisma schema
        working-directory: ./app
        run: npx prisma validate

      - name: 🔧 Check Prisma generation
        working-directory: ./app
        run: npx prisma generate

      - name: 🔍 Format Prisma schema
        working-directory: ./app
        run: npx prisma format --check

  # Final Status Check
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build, unit-tests, integration-tests, e2e-tests, prisma-validation]
    if: always()
    
    steps:
      - name: ✅ Check all jobs succeeded
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" && \
                "${{ needs.e2e-tests.result }}" == "success" && \
                "${{ needs.prisma-validation.result }}" == "success" ]]; then
            echo "🎉 All CI jobs passed successfully!"
          else
            echo "❌ Some CI jobs failed"
            exit 1
          fi

      - name: 📧 Notify on failure
        if: failure()
        run: |
          echo "CI pipeline failed. Check the logs for details."
          echo "Failed jobs:"
          echo "- Lint & Type Check: ${{ needs.lint-and-typecheck.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Unit Tests: ${{ needs.unit-tests.result }}"
          echo "- Integration Tests: ${{ needs.integration-tests.result }}"
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "- Prisma Validation: ${{ needs.prisma-validation.result }}"
